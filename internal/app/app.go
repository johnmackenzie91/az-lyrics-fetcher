package app

import (
	"context"
	"io/ioutil"
	"net/http"

	"fmt"

	"github.com/go-chi/chi"
)

//static type check to ensure *this app fulfills the server interface, generated by the mock
var _ ServerInterface = (*App)(nil)

type LyricClient interface {
	GetLyrics(ctx context.Context, artistName, songTitle string) (string, error)
}

// App is our application which holds our logic and handlers
type App struct {
	server ServerInterface
	router chi.Router
	client LyricClient
}

func (a App) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	a.router.ServeHTTP(w, r)
}

// New returns a new App that is configured with the provided params
func New(client LyricClient) (App, error) {
	a := App{
		client: client,
	}
	// register doc route. This is not part of our api spec
	a.router = chi.NewMux()

	docPath := "/openapi.yaml"
	docs, err := a.loadDocsHandler(docPath)

	if err != nil {
		return a, err
	}

	a.router.Get("/docs", docs)
	a.router.Get("/status", a.Status)

	HandlerFromMux(a, a.router)

	return a, nil
}

func (a App) loadDocsHandler(path string) (http.HandlerFunc, error) {
	docs, err := ioutil.ReadFile(path)
	if err != nil {
		return func(w http.ResponseWriter, r *http.Request) {}, fmt.Errorf("unable to open docs file: %s", path)
	}
	return func(w http.ResponseWriter, r *http.Request) {
		w.Write(docs)
	}, nil
}

func (a App) Status(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("OK"))
}
