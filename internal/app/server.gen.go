// Package app provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package app

import (
	"net/http"

	"github.com/go-chi/chi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /fetch)
	PostFetch(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFetch operation middleware
func (siw *ServerInterfaceWrapper) PostFetch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.PostFetch(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Post("/fetch", wrapper.PostFetch)
	})

	return r
}
